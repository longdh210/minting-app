{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain\\\\minting-app\\\\src\\\\pages\\\\mint-nft.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Web3Modal from \"web3modal\";\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport pinJSONToIPFS from '../api/pinata';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientInfura = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nfunction Mint() {\n  _s();\n\n  const [fileUrl, setFileUrl] = useState(null);\n  const [formInput, udateFormInput] = useState({\n    name: '',\n    description: '',\n    price: '',\n    addressOwner: ''\n  });\n\n  const onChange = async e => {\n    const file = e.target.files[0];\n\n    try {\n      const added = await clientInfura.add(file, {\n        progress: prog => console.log(`received: ${prog}`)\n      });\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      console.log(url);\n      setFileUrl(url);\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  };\n\n  const createMetadata = async () => {\n    // const web3Modal = new Web3Modal()\n    // const connection = await web3Modal.connect()\n    // const provider = new ethers.providers.Web3Provider(connection)\n    const {\n      name,\n      description,\n      price,\n      addressOwner\n    } = formInput;\n    if (!name || !description || !price || !fileUrl || addressOwner) return; //make metadata\n\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = fileUrl;\n    metadata.description = description;\n    metadata.price = price;\n    metadata.addressOwner = addressOwner;\n\n    try {\n      //make pinata call\n      const pinataResponse = await pinJSONToIPFS(metadata);\n\n      if (!pinataResponse.success) {\n        return {\n          success: false,\n          status: \"ðŸ˜¢ Something went wrong while uploading your tokenURI.\"\n        };\n      }\n\n      const tokenURI = pinataResponse.pinataUrl;\n      console.log(\"TokenURI: \", tokenURI);\n      createToken(tokenURI);\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  };\n\n  const createToken = async uri => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Address you want to mint\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Asset Name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Asset Description\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Asset Price in Eth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"Asset\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      width: \"350\",\n      src: fileUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createToken,\n      children: \"Create Digital Asset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Mint, \"muaHWxnbVhFIqEeZqTyp2j+KYSs=\");\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["D:/Blockchain/minting-app/src/pages/mint-nft.js"],"names":["useState","ethers","Web3Modal","create","ipfsHttpClient","pinJSONToIPFS","clientInfura","Mint","fileUrl","setFileUrl","formInput","udateFormInput","name","description","price","addressOwner","onChange","e","file","target","files","added","add","progress","prog","console","log","url","path","error","createMetadata","metadata","Object","image","pinataResponse","success","status","tokenURI","pinataUrl","createToken","uri"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport Web3Modal from \"web3modal\"\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport pinJSONToIPFS from '../api/pinata';\r\n\r\nconst clientInfura = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nfunction Mint() {\r\n    const [fileUrl, setFileUrl] = useState(null);\r\n    const [formInput, udateFormInput] = useState({ name:'', description: '', price: '', addressOwner: '' })\r\n\r\n    const onChange = async (e) => {\r\n        const file = e.target.files[0]\r\n        try {\r\n            const added = await clientInfura.add(\r\n                file,\r\n                {\r\n                    progress: (prog) => console.log(`received: ${prog}`)\r\n                }\r\n            )\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(url)\r\n            setFileUrl(url)\r\n        }\r\n        catch(error) {\r\n            console.log('Error uploading file: ', error)\r\n        }\r\n    }\r\n\r\n    const createMetadata = async () => {\r\n        // const web3Modal = new Web3Modal()\r\n        // const connection = await web3Modal.connect()\r\n        // const provider = new ethers.providers.Web3Provider(connection)\r\n        \r\n        const { name, description, price, addressOwner } = formInput\r\n        if(!name || !description || !price || !fileUrl || addressOwner) return\r\n\r\n        //make metadata\r\n        const metadata = new Object();\r\n        metadata.name = name;\r\n        metadata.image = fileUrl;\r\n        metadata.description = description;\r\n        metadata.price = price;\r\n        metadata.addressOwner = addressOwner;\r\n\r\n        try {\r\n            //make pinata call\r\n            const pinataResponse = await pinJSONToIPFS(metadata)\r\n            if(!pinataResponse.success) {\r\n                return {\r\n                    success: false,\r\n                    status: \"ðŸ˜¢ Something went wrong while uploading your tokenURI.\",\r\n                }\r\n            }\r\n            const tokenURI = pinataResponse.pinataUrl\r\n            console.log(\"TokenURI: \", tokenURI)\r\n            createToken(tokenURI)\r\n        } catch (error) {\r\n            console.log('Error uploading file: ', error)\r\n        }\r\n    }\r\n\r\n    const createToken = async (uri) => {\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                placeholder=\"Address you want to mint\"\r\n            />\r\n            <br/>\r\n            <input\r\n                placeholder=\"Asset Name\"\r\n            />\r\n            <br/>\r\n            <textarea\r\n                placeholder=\"Asset Description\"\r\n            />\r\n            <br/>\r\n            <input\r\n                placeholder=\"Asset Price in Eth\"\r\n            />\r\n            <br/>\r\n            <input\r\n                type=\"file\"\r\n                name=\"Asset\"\r\n                onChange={onChange}\r\n            />\r\n            <br/>\r\n            {\r\n                fileUrl && (<img width=\"350\" src={fileUrl}/>) \r\n            }\r\n            <button onClick={createToken}>\r\n                Create Digital Asset\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mint"]},"metadata":{},"sourceType":"module"}