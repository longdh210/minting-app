{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain\\\\minting-app\\\\src\\\\pages\\\\mint-nft.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport Web3Modal from \"web3modal\";\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport pinJSONToIPFS from '../api/pinata';\nimport { tokenaddress } from '../config';\nimport Token from '../Token.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst clientInfura = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nfunction Mint() {\n  _s();\n\n  const [fileUrl, setFileUrl] = useState(null);\n  const [formInput, updateFormInput] = useState({\n    name: '',\n    description: '',\n    price: '',\n    addressOwner: ''\n  });\n\n  const onChange = async e => {\n    const file = e.target.files[0];\n\n    try {\n      const added = await clientInfura.add(file, {\n        progress: prog => console.log(`received: ${prog}`)\n      });\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      console.log(url);\n      setFileUrl(url);\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  };\n\n  const createMetadata = async () => {\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(connection);\n    const signer = provider.getSigner();\n    var signerAddr = await signer.getAddress();\n    console.log(\"Signer: \", signerAddr);\n    const {\n      name,\n      description,\n      price,\n      addressOwner\n    } = formInput;\n    if (!name || !description || !price || !fileUrl || !addressOwner) return; //make metadata\n\n    const metadata = new Object();\n    metadata.name = name;\n    metadata.image = fileUrl;\n    metadata.description = description;\n    metadata.price = price;\n    metadata.addressOwner = addressOwner;\n\n    try {\n      //make pinata call\n      const pinataResponse = await pinJSONToIPFS(metadata);\n\n      if (!pinataResponse.success) {\n        return {\n          success: false,\n          status: \"ðŸ˜¢ Something went wrong while uploading your tokenURI.\"\n        };\n      }\n\n      const tokenURI = pinataResponse.pinataUrl;\n      console.log(\"TokenURI: \", tokenURI);\n      createToken(tokenURI);\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  };\n\n  const createToken = async uri => {\n    const {\n      addressOwner\n    } = formInput;\n    const web3Modal = new Web3Modal();\n    const connection = await web3Modal.connect();\n    const provider = new ethers.providers.Web3Provider(connection);\n    const signer = provider.getSigner(); //create token\n\n    let contract = new ethers.Contract(tokenaddress, Token.abi, signer);\n    let transaction = await contract.mintNFT(addressOwner, uri);\n    await transaction.wait();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Address you want to mint\",\n      onChange: e => updateFormInput({ ...formInput,\n        addressOwner: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Asset Name\",\n      onChange: e => updateFormInput({ ...formInput,\n        name: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Asset Description\",\n      onChange: e => updateFormInput({ ...formInput,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Asset Price in Eth\",\n      onChange: e => updateFormInput({ ...formInput,\n        price: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      name: \"Asset\",\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), fileUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n      width: \"350\",\n      src: fileUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: createMetadata,\n      children: \"Create Digital Asset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Mint, \"IINkC4nqrnsxJzEi4DjSOZ0rvvI=\");\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["D:/Blockchain/minting-app/src/pages/mint-nft.js"],"names":["useState","ethers","Web3Modal","create","ipfsHttpClient","pinJSONToIPFS","tokenaddress","Token","clientInfura","Mint","fileUrl","setFileUrl","formInput","updateFormInput","name","description","price","addressOwner","onChange","e","file","target","files","added","add","progress","prog","console","log","url","path","error","createMetadata","web3Modal","connection","connect","provider","providers","Web3Provider","signer","getSigner","signerAddr","getAddress","metadata","Object","image","pinataResponse","success","status","tokenURI","pinataUrl","createToken","uri","contract","Contract","abi","transaction","mintNFT","wait","value"],"mappings":"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","sourcesContent":["import { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport Web3Modal from \"web3modal\"\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport pinJSONToIPFS from '../api/pinata';\r\n\r\nimport { tokenaddress } from '../config';\r\nimport Token from '../Token.json'\r\n\r\nconst clientInfura = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\n\r\nfunction Mint() {\r\n    const [fileUrl, setFileUrl] = useState(null);\r\n    const [formInput, updateFormInput] = useState({ name:'', description: '', price: '', addressOwner: '' })\r\n\r\n    const onChange = async (e) => {\r\n        const file = e.target.files[0]\r\n        try {\r\n            const added = await clientInfura.add(\r\n                file,\r\n                {\r\n                    progress: (prog) => console.log(`received: ${prog}`)\r\n                }\r\n            )\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(url)\r\n            setFileUrl(url)\r\n        }\r\n        catch(error) {\r\n            console.log('Error uploading file: ', error)\r\n        }\r\n    }\r\n\r\n    const createMetadata = async () => {\r\n        const web3Modal = new Web3Modal()\r\n        const connection = await web3Modal.connect()\r\n        const provider = new ethers.providers.Web3Provider(connection)\r\n        const signer = provider.getSigner()\r\n        var signerAddr = await signer.getAddress();\r\n        console.log(\"Signer: \", signerAddr);\r\n        \r\n        const { name, description, price, addressOwner } = formInput\r\n        if(!name || !description || !price || !fileUrl || !addressOwner) return\r\n\r\n        //make metadata\r\n        const metadata = new Object();\r\n        metadata.name = name;\r\n        metadata.image = fileUrl;\r\n        metadata.description = description;\r\n        metadata.price = price;\r\n        metadata.addressOwner = addressOwner;\r\n\r\n        try {\r\n            //make pinata call\r\n            const pinataResponse = await pinJSONToIPFS(metadata)\r\n            if(!pinataResponse.success) {\r\n                return {\r\n                    success: false,\r\n                    status: \"ðŸ˜¢ Something went wrong while uploading your tokenURI.\",\r\n                }\r\n            }\r\n            const tokenURI = pinataResponse.pinataUrl\r\n            console.log(\"TokenURI: \", tokenURI)\r\n            createToken(tokenURI)\r\n        } catch (error) {\r\n            console.log('Error uploading file: ', error)\r\n        }\r\n    }\r\n\r\n    const createToken = async (uri) => {\r\n        const { addressOwner } = formInput\r\n        const web3Modal = new Web3Modal()\r\n        const connection = await web3Modal.connect()\r\n        const provider = new ethers.providers.Web3Provider(connection)\r\n        const signer = provider.getSigner()\r\n\r\n        //create token\r\n        let contract = new ethers.Contract(tokenaddress, Token.abi, signer)\r\n        let transaction = await contract.mintNFT(addressOwner, uri)\r\n        await transaction.wait()\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                placeholder=\"Address you want to mint\"\r\n                onChange={e => updateFormInput({ ...formInput, addressOwner: e.target.value })}\r\n            />\r\n            <br/>\r\n            <input\r\n                placeholder=\"Asset Name\"\r\n                onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n\r\n            />\r\n            <br/>\r\n            <textarea\r\n                placeholder=\"Asset Description\"\r\n                onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n\r\n            />\r\n            <br/>\r\n            <input\r\n                placeholder=\"Asset Price in Eth\"\r\n                onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n\r\n            />\r\n            <br/>\r\n            <input\r\n                type=\"file\"\r\n                name=\"Asset\"\r\n                onChange={onChange}\r\n            />\r\n            <br/>\r\n            {\r\n                fileUrl && (<img width=\"350\" src={fileUrl}/>) \r\n            }\r\n            <br/>\r\n            <button className=\"button\" onClick={createMetadata}>\r\n                Create Digital Asset\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mint"]},"metadata":{},"sourceType":"module"}