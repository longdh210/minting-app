{"ast":null,"code":"var _jsxFileName = \"D:\\\\Blockchain\\\\minting-app\\\\src\\\\pages\\\\display-nft.js\",\n    _s = $RefreshSig$();\n\nimport { ethers } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { tokenaddress } from '../config';\nimport Token from '../Token.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Display() {\n  _s();\n\n  const [nfts, setNfts] = useState([]);\n  const [loadingState, setLoadingState] = useState('not-loaded');\n  useEffect(() => {\n    loadNFTs();\n  }, []);\n\n  async function loadNFTs() {\n    const provider = new ethers.providers.JsonRpcProvider();\n    const tokenContract = new ethers.Contract(tokenaddress, Token.abi, provider);\n    const data = await tokenContract.getTokenData();\n    const items = await Promise.all(data.map(async i => {\n      const tokenUri = await tokenContract.tokenURI(i.tokenId);\n      const meta = await axios.get(tokenUri);\n      let item = {\n        tokenId: i.tokenId.toNumber(),\n        image: meta.data.image,\n        name: meta.data.name,\n        price: meta.data.price,\n        addressOwner: meta.data.addressOwner\n      };\n      return item;\n    }));\n    setNfts(items);\n    setLoadingState('loaded');\n  }\n\n  if (loadingState === 'loaded' && !nfts.length) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    className: \"header\",\n    children: \"No NFT\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 58\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"boxx\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"boxy\",\n        children: nfts.map((nft, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.image,\n            className: \"img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"boxc\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"para\",\n              children: [\"Name - \", nft.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Display, \"DL6OJ8B7YCUHYFOUoPi2JI8l+/o=\");\n\n_c = Display;\nexport default Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["D:/Blockchain/minting-app/src/pages/display-nft.js"],"names":["ethers","useEffect","useState","axios","tokenaddress","Token","Display","nfts","setNfts","loadingState","setLoadingState","loadNFTs","provider","providers","JsonRpcProvider","tokenContract","Contract","abi","data","getTokenData","items","Promise","all","map","i","tokenUri","tokenURI","tokenId","meta","get","item","toNumber","image","name","price","addressOwner","length","nft"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,QAAvB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,KAAP,MAAkB,eAAlB;;;AAEA,SAASC,OAAT,GAAmB;AAAA;;AACf,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;AACF,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,YAAD,CAAhD;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;;AAGA,iBAAeA,QAAf,GAA0B;AACxB,UAAMC,QAAQ,GAAG,IAAIZ,MAAM,CAACa,SAAP,CAAiBC,eAArB,EAAjB;AACA,UAAMC,aAAa,GAAG,IAAIf,MAAM,CAACgB,QAAX,CAAoBZ,YAApB,EAAkCC,KAAK,CAACY,GAAxC,EAA6CL,QAA7C,CAAtB;AACA,UAAMM,IAAI,GAAG,MAAMH,aAAa,CAACI,YAAd,EAAnB;AAEA,UAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,GAAL,CAAS,MAAMC,CAAN,IAAW;AAClD,YAAMC,QAAQ,GAAG,MAAMV,aAAa,CAACW,QAAd,CAAuBF,CAAC,CAACG,OAAzB,CAAvB;AACA,YAAMC,IAAI,GAAG,MAAMzB,KAAK,CAAC0B,GAAN,CAAUJ,QAAV,CAAnB;AACA,UAAIK,IAAI,GAAG;AACTH,QAAAA,OAAO,EAAEH,CAAC,CAACG,OAAF,CAAUI,QAAV,EADA;AAETC,QAAAA,KAAK,EAAEJ,IAAI,CAACV,IAAL,CAAUc,KAFR;AAGTC,QAAAA,IAAI,EAAEL,IAAI,CAACV,IAAL,CAAUe,IAHP;AAITC,QAAAA,KAAK,EAAEN,IAAI,CAACV,IAAL,CAAUgB,KAJR;AAKTC,QAAAA,YAAY,EAAEP,IAAI,CAACV,IAAL,CAAUiB;AALf,OAAX;AAOA,aAAOL,IAAP;AACD,KAX+B,CAAZ,CAApB;AAYAtB,IAAAA,OAAO,CAACY,KAAD,CAAP;AACAV,IAAAA,eAAe,CAAC,QAAD,CAAf;AACD;;AAID,MAAID,YAAY,KAAK,QAAjB,IAA6B,CAACF,IAAI,CAAC6B,MAAvC,EAA+C,oBAAQ;AAAI,IAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AAC/C,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBAEI7B,IAAI,CAACgB,GAAL,CAAS,CAACc,GAAD,EAAMb,CAAN,kBACP;AAAa,UAAA,SAAS,EAAC,WAAvB;AAAA,kCACE;AAAK,YAAA,GAAG,EAAEa,GAAG,CAACL,KAAd;AAAqB,YAAA,SAAS,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAK,YAAA,SAAS,EAAC,MAAf;AAAA,mCACE;AAAG,cAAA,SAAS,EAAC,MAAb;AAAA,oCAA4BK,GAAG,CAACJ,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA,WAAUT,CAAV;AAAA;AAAA;AAAA;AAAA,gBADF;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAhDQlB,O;;KAAAA,O;AAkDT,eAAeA,OAAf","sourcesContent":["import { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport { tokenaddress } from '../config';\r\nimport Token from '../Token.json'\r\n\r\nfunction Display() {\r\n    const [nfts, setNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const provider = new ethers.providers.JsonRpcProvider()\r\n    const tokenContract = new ethers.Contract(tokenaddress, Token.abi, provider)\r\n    const data = await tokenContract.getTokenData()\r\n\r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenUri)\r\n      let item = {\r\n        tokenId: i.tokenId.toNumber(),\r\n        image: meta.data.image,\r\n        name: meta.data.name,\r\n        price: meta.data.price,\r\n        addressOwner: meta.data.addressOwner,\r\n      }\r\n      return item\r\n    }))\r\n    setNfts(items)\r\n    setLoadingState('loaded')\r\n  }\r\n\r\n\r\n\r\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"header\">No NFT</h1>)\r\n  return (\r\n    <div className=\"grid-container\">\r\n      <div className=\"boxx\">\r\n        <div className=\"boxy\">\r\n          {\r\n            nfts.map((nft, i) => (\r\n              <div key={i} className=\"grid-item\">\r\n                <img src={nft.image} className=\"img\" />\r\n                <div className=\"boxc\">\r\n                  <p className=\"para\">Name - {nft.name}</p>\r\n                </div>\r\n              </div>\r\n            ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Display"]},"metadata":{},"sourceType":"module"}