[{"D:\\Blockchain\\minting-app\\src\\index.js":"1","D:\\Blockchain\\minting-app\\src\\reportWebVitals.js":"2","D:\\Blockchain\\minting-app\\src\\App.js":"3","D:\\Blockchain\\minting-app\\src\\pages\\display-nft.js":"4","D:\\Blockchain\\minting-app\\src\\pages\\mint-nft.js":"5","D:\\Blockchain\\minting-app\\src\\api\\pinata.js":"6","D:\\Blockchain\\minting-app\\src\\config.js":"7"},{"size":375,"mtime":1645428986506,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1645428845243,"results":"10","hashOfConfig":"9"},{"size":586,"mtime":1645429001060,"results":"11","hashOfConfig":"9"},{"size":1785,"mtime":1645525188485,"results":"12","hashOfConfig":"9"},{"size":4444,"mtime":1645515943964,"results":"13","hashOfConfig":"9"},{"size":828,"mtime":1645435879606,"results":"14","hashOfConfig":"9"},{"size":72,"mtime":1645525473440,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7g4t9k",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Blockchain\\minting-app\\src\\index.js",[],[],"D:\\Blockchain\\minting-app\\src\\reportWebVitals.js",[],[],"D:\\Blockchain\\minting-app\\src\\App.js",[],[],"D:\\Blockchain\\minting-app\\src\\pages\\display-nft.js",["38"],[],"D:\\Blockchain\\minting-app\\src\\pages\\mint-nft.js",["39","40"],[],"import { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport Web3Modal from \"web3modal\"\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport pinJSONToIPFS from '../api/pinata';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nimport { tokenaddress } from '../config';\r\nimport Token from '../Token.json'\r\n\r\nconst clientInfura = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\n\r\nfunction Mint() {\r\n    const [fileUrl, setFileUrl] = useState(null);\r\n    const [formInput, updateFormInput] = useState({ name:'', description: '', price: '', addressOwner: '' })\r\n    const navigate = useNavigate()\r\n    \r\n    const onChange = async (e) => {\r\n        const file = e.target.files[0]\r\n        try {\r\n            const added = await clientInfura.add(\r\n                file,\r\n                {\r\n                    progress: (prog) => console.log(`received: ${prog}`)\r\n                }\r\n            )\r\n            const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n            console.log(url)\r\n            setFileUrl(url)\r\n        }\r\n        catch(error) {\r\n            console.log('Error uploading file: ', error)\r\n        }\r\n    }\r\n\r\n    const createMetadata = async () => {\r\n        const web3Modal = new Web3Modal()\r\n        const connection = await web3Modal.connect()\r\n        const provider = new ethers.providers.Web3Provider(connection)\r\n        const signer = provider.getSigner()\r\n        var signerAddr = await signer.getAddress();\r\n        console.log(\"Signer: \", signerAddr);\r\n        \r\n        const { name, description, price, addressOwner } = formInput\r\n        if(!name || !description || !price || !fileUrl || !addressOwner) return\r\n\r\n        //make metadata\r\n        const metadata = new Object();\r\n        metadata.name = name;\r\n        metadata.image = fileUrl;\r\n        metadata.description = description;\r\n        metadata.price = price;\r\n        metadata.addressOwner = addressOwner;\r\n        metadata.addressToken = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\r\n\r\n        try {\r\n            //make pinata call\r\n            const pinataResponse = await pinJSONToIPFS(metadata)\r\n            if(!pinataResponse.success) {\r\n                return {\r\n                    success: false,\r\n                    status: \"ðŸ˜¢ Something went wrong while uploading your tokenURI.\",\r\n                }\r\n            }\r\n            const tokenURI = pinataResponse.pinataUrl\r\n            console.log(\"TokenURI: \", tokenURI)\r\n            createToken(tokenURI)\r\n        } catch (error) {\r\n            console.log('Error uploading file: ', error)\r\n        }\r\n    }\r\n\r\n    const createToken = async (uri) => {\r\n        const { addressOwner } = formInput\r\n        const web3Modal = new Web3Modal()\r\n        const connection = await web3Modal.connect()\r\n        const provider = new ethers.providers.Web3Provider(connection)\r\n        const signer = provider.getSigner()\r\n\r\n        //create token\r\n        let contract = new ethers.Contract(tokenaddress, Token.abi, signer)\r\n        let transaction = await contract.mintNFT(addressOwner, uri)\r\n        await transaction.wait()\r\n        navigate('/displayNFT')\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input\r\n                placeholder=\"Address you want to mint\"\r\n                onChange={e => updateFormInput({ ...formInput, addressOwner: e.target.value })}\r\n            />\r\n            <br/>\r\n            <input\r\n                placeholder=\"Asset Name\"\r\n                onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n\r\n            />\r\n            <br/>\r\n            <textarea\r\n                placeholder=\"Asset Description\"\r\n                onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n\r\n            />\r\n            <br/>\r\n            <input\r\n                placeholder=\"Asset Price in Eth\"\r\n                onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n\r\n            />\r\n            <br/>\r\n            <input\r\n                type=\"file\"\r\n                name=\"Asset\"\r\n                onChange={onChange}\r\n            />\r\n            <br/>\r\n            {\r\n                fileUrl && (<img width=\"350\" src={fileUrl}/>) \r\n            }\r\n            <br/>\r\n            <button className=\"button\" onClick={createMetadata}>\r\n                Create Digital Asset\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mint","D:\\Blockchain\\minting-app\\src\\api\\pinata.js",[],[],"D:\\Blockchain\\minting-app\\src\\config.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":46,"column":19,"nodeType":"43","endLine":46,"endColumn":42},{"ruleId":"44","severity":1,"message":"45","line":49,"column":26,"nodeType":"46","messageId":"47","endLine":49,"endColumn":38},{"ruleId":"41","severity":1,"message":"42","line":120,"column":29,"nodeType":"43","endLine":120,"endColumn":61},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral"]